/**
 * This file was automatically generated by the openapi-zod-client.
 * API Spec: https://developer.dhl.com/api-reference/shipment-tracking
 */

import { z } from "zod";

const TrackingSummary = z
  .object({
    trackingNumber: z.string(),
    expectedDeliveryDate: z.string(),
    expectedDeliveryTime: z.string(),
    guaranteedDeliveryDate: z.string(),
    eventSummaries: z.array(z.string()).min(1).max(99),
  })
  .partial();
const AvailableNotificationOptions = z
  .object({
    futureDelivery: z.boolean(),
    alertDelivery: z.boolean(),
    todayDelivery: z.boolean(),
    UP: z.boolean(),
    DND: z.boolean(),
  })
  .partial();
const EnabledNotificationRequests = z
  .object({
    SMS: AvailableNotificationOptions,
    EMail: AvailableNotificationOptions.and(
      z
        .object({ firstDisplayable: z.boolean(), otherActivity: z.boolean() })
        .partial()
        .passthrough()
    ),
  })
  .partial();
const TrackingDetails_extendRetentionExtraServiceCodeOptions = z
  .object({ extendRetentionExtraServiceCodeOption: z.string() })
  .partial()
  .passthrough();
const TrackingEvent = z
  .object({
    eventType: z.string(),
    eventTimestamp: z.string().datetime({ offset: true }),
    eventCountry: z.string(),
    eventCity: z.string(),
    eventState: z.string(),
    eventZIP: z.string(),
    firm: z.string().min(0).max(50),
    name: z.string(),
    authorizedAgent: z.boolean(),
    eventCode: z.string(),
    actionCode: z.string(),
    reasonCode: z.string(),
  })
  .partial();
const TrackingDetails = z
  .object({
    trackingNumber: z.string(),
    additionalInfo: z.string(),
    ADPScripting: z.string(),
    archiveRestoreInfo: z.string(),
    associatedLabel: z.string(),
    carrierRelease: z.boolean(),
    mailClass: z.enum([
      "BOUND_PRINTED_MATTER",
      "LIBRARY_MAIL",
      "USPS_RETAIL_GROUND",
      "MEDIA_MAIL",
      "CRITICAL_MAIL",
      "PRIORITY_MAIL_INTERNATIONAL_PARCELS",
      "DOMESTIC_MATTER_FOR_THE_BLIND",
      "PRIORITY_MAIL_EXPRESS",
      "FIRST-CLASS_MAIL",
      "PRIORITY_MAIL_EXPRESS_INTERNATIONAL",
      "FIRST-CLASS_PACKAGE_INTERNATIONAL_SERVICE",
      "PARCEL_SELECT_LIGHTWEIGHT",
      "PRIORITY_MAIL_GUARANTEED",
      "GLOBAL_EXPRESS_GUARANTEED",
      "PRIORITY_MAIL",
      "PARCEL_SELECT",
      "USPS_MARKETING_MAIL",
      "USPS_MARKETING_MAIL",
      "PRIORITY_MAIL_SAME_DAY",
    ]),
    destinationCity: z.string(),
    destinationCountryCode: z.string(),
    destinationState: z.object({}).partial().passthrough(),
    destinationZIP: z.string(),
    editedLabelId: z.string(),
    emailEnabled: z.boolean(),
    endOfDay: z.string(),
    eSOFEligible: z.boolean(),
    expectedDeliveryTimeStamp: z.string().datetime({ offset: true }),
    expectedDeliveryType: z.string(),
    guaranteedDeliveryTimeStamp: z.string().datetime({ offset: true }),
    guaranteedDetails: z.string(),
    itemShape: z.enum(["LETTER", "FLAT", "PARCEL", "UNKNOWN"]),
    kahalaIndicator: z.boolean(),
    mailType: z.enum([
      "INTERNATIONAL_INBOUND",
      "INTERNATIONAL_OUTBOUND",
      "DOMESTIC_MAIL",
      "UNKNOWN",
    ]),
    approximateIntakeDate: z.string(),
    uniqueTrackingId: z.string(),
    onTime: z.boolean(),
    originCity: z.string(),
    originCountry: z.string().max(2),
    originState: z.string().max(3),
    originZIP: z.string().max(5),
    proofOfDeliveryEnabled: z.boolean(),
    predictedDeliveryTimeStamp: z.string().datetime({ offset: true }),
    predictedDeliveryWindowStartTime: z.string(),
    predictedDeliveryWindowEndTime: z.string(),
    relatedReturnReceiptID: z.string(),
    redeliveryEnabled: z.boolean(),
    enabledNotificationRequests: EnabledNotificationRequests,
    restoreEnabled: z.boolean(),
    returnDateNotice: z.string(),
    RRAMenabled: z.boolean(),
    RREEnabled: z.boolean(),
    services: z.array(z.string()),
    serviceTypeCode: z.string(),
    status: z.string(),
    statusCategory: z.string(),
    statusSummary: z.string(),
    trackingProofOfDeliveryEnabled: z.boolean(),
    valueofArticle: z.string(),
    extendRetentionPurchasedCode: z.string(),
    extendRetentionExtraServiceCodeOptions: z.array(
      TrackingDetails_extendRetentionExtraServiceCodeOptions
    ),
    trackingEvents: z.array(TrackingEvent).max(99),
  })
  .partial()
  .passthrough();
const inline_response_200 = z.union([TrackingSummary, TrackingDetails]);
const ErrorMessage_error_source = z
  .object({ parameter: z.string(), example: z.string() })
  .partial()
  .passthrough();
const ErrorMessage_error_errors = z
  .object({
    status: z.string(),
    code: z.string(),
    title: z.string(),
    detail: z.string(),
    source: ErrorMessage_error_source,
  })
  .partial()
  .passthrough();
const ErrorMessage_error = z
  .object({
    code: z.string(),
    message: z.string(),
    errors: z.array(ErrorMessage_error_errors),
  })
  .partial()
  .passthrough();
const ErrorMessage = z
  .object({ apiVersion: z.string(), error: ErrorMessage_error })
  .partial()
  .passthrough();
const MailingEventType = z.object({}).partial();
const email = z.string();
const cellNumber = z.string();
const NotificationMethod = z.union([email, cellNumber]);
const TrackingNotificationRequest = z.object({
  uniqueTrackingId: z.number().int().optional(),
  approximateIntakeDate: z.string().optional(),
  notifyEventTypes: z.array(MailingEventType).min(1).max(7).optional(),
  firstName: z.string().min(0).max(50).optional(),
  lastName: z.string().min(0).max(50).optional(),
  notifications: z.array(NotificationMethod).min(1).max(3),
});
const TrackingNotificationAcknowledgement = z
  .object({ resultText: z.string(), returnCode: z.string() })
  .partial();

export const schemas = {
  TrackingSummary,
  AvailableNotificationOptions,
  EnabledNotificationRequests,
  TrackingDetails_extendRetentionExtraServiceCodeOptions,
  TrackingEvent,
  TrackingDetails,
  inline_response_200,
  ErrorMessage_error_source,
  ErrorMessage_error_errors,
  ErrorMessage_error,
  ErrorMessage,
  MailingEventType,
  email,
  cellNumber,
  NotificationMethod,
  TrackingNotificationRequest,
  TrackingNotificationAcknowledgement,
};
