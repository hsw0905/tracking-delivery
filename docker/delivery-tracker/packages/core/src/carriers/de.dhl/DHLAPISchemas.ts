/**
 * This file was automatically generated by the openapi-zod-client.
 * API Spec: https://developer.dhl.com/api-reference/shipment-tracking
 */

import { z } from "zod";

const supermodelIoGs1PropertiesCountryCode = z.string();
const supermodelIoLogisticsSupportingPlace = z
  .object({
    address: z
      .object({
        countryCode: supermodelIoGs1PropertiesCountryCode,
        postalCode: z.string(),
        addressLocality: z.string(),
        streetAddress: z.string(),
      })
      .partial()
      .passthrough(),
  })
  .partial()
  .passthrough();
const supermodelIoSchemaorgDataType = z.unknown();
const supermodelIoSchemaorgDateTime = supermodelIoSchemaorgDataType;
const supermodelIoSchemaorgDate = supermodelIoSchemaorgDataType;
const supermodelIoLogisticsSupportingTimestamp =
  supermodelIoSchemaorgDateTime.and(supermodelIoSchemaorgDate);
const supermodelIoLogisticsTrackingShipmentEvent = z
  .object({
    timestamp: supermodelIoLogisticsSupportingTimestamp,
    location: supermodelIoLogisticsSupportingPlace,
    statusCode: z.enum([
      "pre-transit",
      "transit",
      "delivered",
      "failure",
      "unknown",
    ]),
    status: z.string(),
    description: z.string(),
    pieceIds: z.array(z.string()),
    remark: z.string(),
    nextSteps: z.string(),
  })
  .partial()
  .passthrough();
const supermodelIoLogisticsSupportingOrganization = z
  .object({ organizationName: z.string() })
  .partial()
  .passthrough();
const supermodelIoLogisticsSupportingProduct = z
  .object({ productName: z.string() })
  .partial()
  .passthrough();
const supermodelIoLogisticsSupportingProvider = z
  .object({
    destinationProvider: z.enum([
      "oepag",
      "express",
      "parcel-bl",
      "bpost",
      "rapido",
      "acs-courier",
      "parcel-cz",
      "freight",
      "parcel-de",
      "trans-o-flex",
      "bring",
      "parcel-es",
      "posti",
      "relais-colis",
      "colis-prive",
      "freight-fr",
      "chronopost",
      "parcel-uk",
      "hrvatska-posta",
      "magyar-posta",
      "anpost",
      "fastway",
      "parcel-lu",
      "parcel-be",
      "parcel-nl",
      "posta",
      "slovak-parcel-service",
      "parcel-pl",
      "parcel-pt",
      "urgent-cargus",
    ]),
  })
  .partial()
  .passthrough();
const supermodelIoLogisticsSupportingPerson = z
  .object({ familyName: z.string(), givenName: z.string(), name: z.string() })
  .partial()
  .passthrough();
const supermodelIoLogisticsTrackingProofOfDelivery = z
  .object({
    timestamp: supermodelIoLogisticsSupportingTimestamp,
    signatureUrl: z.string(),
    documentUrl: z.string(),
    signed: supermodelIoLogisticsSupportingPerson,
  })
  .partial()
  .passthrough();
const supermodelIoLogisticsTrackingDgfLocation = z
  .object({ "dgf:locationName": z.string() })
  .partial()
  .passthrough();
const supermodelIoLogisticsTrackingDgfAirport =
  supermodelIoLogisticsTrackingDgfLocation;
const supermodelIoLogisticsTrackingDgfRoute = z
  .object({
    "dgf:vesselName": z.string(),
    "dgf:voyageFlightNumber": z.string(),
    "dgf:airportOfDeparture": supermodelIoLogisticsTrackingDgfAirport,
    "dgf:airportOfDestination": supermodelIoLogisticsTrackingDgfAirport,
    "dgf:estimatedDepartureDate": supermodelIoLogisticsSupportingTimestamp,
    "dgf:estimatedArrivalDate": supermodelIoLogisticsSupportingTimestamp,
    "dgf:placeOfAcceptance": supermodelIoLogisticsTrackingDgfLocation,
    "dgf:portOfLoading": supermodelIoLogisticsTrackingDgfLocation,
    "dgf:portOfUnloading": supermodelIoLogisticsTrackingDgfLocation,
    "dgf:placeOfDelivery": supermodelIoLogisticsTrackingDgfLocation,
  })
  .partial()
  .passthrough();
const supermodelIoLogisticsTrackingShipmentDetails = z
  .object({
    carrier: supermodelIoLogisticsSupportingOrganization,
    product: supermodelIoLogisticsSupportingProduct,
    provider: supermodelIoLogisticsSupportingProvider,
    receiver: supermodelIoLogisticsSupportingOrganization.and(
      supermodelIoLogisticsSupportingPerson
    ),
    sender: supermodelIoLogisticsSupportingOrganization.and(
      supermodelIoLogisticsSupportingPerson
    ),
    proofOfDelivery: supermodelIoLogisticsTrackingProofOfDelivery,
    totalNumberOfPieces: z.number(),
    pieceIds: z.array(z.string()),
    weight: z.object({}).partial().passthrough(),
    volume: z.object({}).partial().passthrough(),
    loadingMeters: z.number(),
    dimensions: z
      .object({
        width: z.object({}).partial().passthrough(),
        height: z.object({}).partial().passthrough(),
        length: z.object({}).partial().passthrough(),
      })
      .partial()
      .passthrough(),
    references: z.array(
      z
        .object({
          number: z.string(),
          type: z.enum([
            "customer-reference",
            "customer-confirmation-number",
            "local-tracking-number",
            "ecommerce-number",
            "housebill",
            "masterbill",
            "container-number",
            "shipment-id",
            "domestic-consignment-id",
            "reference",
          ]),
        })
        .partial()
        .passthrough()
    ),
    "dgf:routes": z.array(supermodelIoLogisticsTrackingDgfRoute),
  })
  .partial()
  .passthrough();
const supermodelIoLogisticsTrackingShipment = z
  .object({
    id: z.string(),
    service: z.enum([
      "freight",
      "express",
      "post-de",
      "parcel-de",
      "parcel-nl",
      "parcel-pl",
      "parcel-uk",
      "dsc",
      "dgf",
      "ecommerce",
      "ecommerce-europe",
      "svb",
    ]),
    origin: supermodelIoLogisticsSupportingPlace,
    destination: supermodelIoLogisticsSupportingPlace,
    status: supermodelIoLogisticsTrackingShipmentEvent,
    estimatedTimeOfDelivery: supermodelIoLogisticsSupportingTimestamp,
    estimatedDeliveryTimeFrame: z
      .object({
        estimatedFrom: supermodelIoLogisticsSupportingTimestamp,
        estimatedThrough: supermodelIoLogisticsSupportingTimestamp,
      })
      .partial()
      .passthrough(),
    estimatedTimeOfDeliveryRemark: z.unknown(),
    serviceUrl: z.unknown(),
    rerouteUrl: z.unknown(),
    details: supermodelIoLogisticsTrackingShipmentDetails,
    events: z.array(supermodelIoLogisticsTrackingShipmentEvent),
  })
  .partial()
  .passthrough();
const supermodelIoLogisticsTrackingShipments = z
  .object({
    url: z.string(),
    prevUrl: z.string(),
    nextUrl: z.string(),
    firstUrl: z.string(),
    lastUrl: z.string(),
    shipments: z.array(supermodelIoLogisticsTrackingShipment),
    possibleAdditionalShipmentsUrl: z.array(z.string()),
  })
  .partial()
  .passthrough();

export const schemas = {
  supermodelIoGs1PropertiesCountryCode,
  supermodelIoLogisticsSupportingPlace,
  supermodelIoSchemaorgDataType,
  supermodelIoSchemaorgDateTime,
  supermodelIoSchemaorgDate,
  supermodelIoLogisticsSupportingTimestamp,
  supermodelIoLogisticsTrackingShipmentEvent,
  supermodelIoLogisticsSupportingOrganization,
  supermodelIoLogisticsSupportingProduct,
  supermodelIoLogisticsSupportingProvider,
  supermodelIoLogisticsSupportingPerson,
  supermodelIoLogisticsTrackingProofOfDelivery,
  supermodelIoLogisticsTrackingDgfLocation,
  supermodelIoLogisticsTrackingDgfAirport,
  supermodelIoLogisticsTrackingDgfRoute,
  supermodelIoLogisticsTrackingShipmentDetails,
  supermodelIoLogisticsTrackingShipment,
  supermodelIoLogisticsTrackingShipments,
};
